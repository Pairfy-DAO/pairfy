import { AsyncKeyAgent, SignTransactionContext, SignTransactionOptions, WitnessOptions, WitnessedTx, Witnesser } from '../types.js';
import { Cardano, Serialization } from '@cardano-sdk/core';
import { Cip30DataSignature } from '@cardano-sdk/dapp-connector';
import { Cip30SignDataRequest } from '../cip8/index.js';
export declare class Bip32Ed25519Witnesser implements Witnesser {
    #private;
    constructor(keyAgent: AsyncKeyAgent);
    witness(tx: Serialization.Transaction, context: SignTransactionContext, options?: WitnessOptions): Promise<WitnessedTx>;
    signData(props: Cip30SignDataRequest): Promise<Cip30DataSignature>;
    static getSignatures(keyAgent: AsyncKeyAgent, txInternals: Cardano.TxBodyWithHash, context: SignTransactionContext, options?: SignTransactionOptions): Promise<Cardano.Signatures>;
}
export declare const createBip32Ed25519Witnesser: (keyAgent: AsyncKeyAgent) => Bip32Ed25519Witnesser;
//# sourceMappingURL=createWitnesser.d.ts.map