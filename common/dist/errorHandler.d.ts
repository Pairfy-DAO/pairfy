import { Request, Response, NextFunction, ErrorRequestHandler } from "express";
export declare const ERROR_CODES: {
    BAD_REQUEST: string;
    UNAUTHORIZED: string;
    FORBIDDEN: string;
    NOT_FOUND: string;
    METHOD_NOT_ALLOWED: string;
    CONFLICT: string;
    PAYLOAD_TOO_LARGE: string;
    UNSUPPORTED_MEDIA_TYPE: string;
    VALIDATION_ERROR: string;
    INVALID_TOKEN: string;
    TOKEN_EXPIRED: string;
    MISSING_FIELDS: string;
    INVALID_CREDENTIALS: string;
    USER_NOT_FOUND: string;
    RESOURCE_ALREADY_EXISTS: string;
    RATE_LIMIT_EXCEEDED: string;
    TOO_MANY_REQUESTS: string;
    INVALID_SIGNATURE: string;
    UPDATE_CONFLICT: string;
    UNVERIFIED_EMAIL: string;
    EMAIL_ALREADY_VERIFIED: string;
    INTERNAL_ERROR: string;
    SERVICE_UNAVAILABLE: string;
    TIMEOUT_ERROR: string;
    DATABASE_ERROR: string;
    CACHE_ERROR: string;
    EMAIL_DELIVERY_ERROR: string;
    DEPENDENCY_FAILURE: string;
    INSUFFICIENT_FUNDS: string;
    ACCOUNT_SUSPENDED: string;
    VERIFICATION_FAILED: string;
    OPERATION_NOT_PERMITTED: string;
    ACTION_NOT_ALLOWED: string;
    DUPLICATE_OPERATION: string;
    RESOURCE_LOCKED: string;
};
export declare class ApiError extends Error {
    statusCode: number;
    code: string;
    details?: unknown;
    isOperational: boolean;
    constructor(statusCode: number, message: string, options?: {
        code?: string;
        details?: unknown;
        isOperational?: boolean;
    });
}
export declare const errorHandler: ErrorRequestHandler;
export declare const asyncHandler: (fn: (...args: any[]) => Promise<any>) => (req: Request, res: Response, next: NextFunction) => Promise<any>;
