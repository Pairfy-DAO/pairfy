  (StateMachineDatum { state, seller, collateral, price, buyer, .. }, Locking { buyer_param, range_param }) -> {
            let must_be_state = state == 0

            let must_be_empty = buyer == None

            let must_be_signed =
              list.has(context.transaction.extra_signatories, buyer_param)

            expect Some(sm_input) = 
                list.find(context.transaction.inputs, fn(input) { input.output_reference == own_ref })

            
            expect Some(sm_output) = 
              list.find(context.transaction.outputs, fn(output) { output.address == sm_input.output.address })


            let must_be_policy = list.has(value.policies(sm_output.value), threadtoken)

            let must_be_price = value.lovelace_of(sm_output.value) >= price

            let new_data: Data = StateMachineDatum {
              state : 1,
              seller : seller,
              collateral : collateral,
              price: price,
              buyer: Some(buyer_param),
              range: Some(range_param)
            }

            let new_datum = InlineDatum(new_data)

            let must_be_datum = new_datum == sm_output.datum

            must_be_state? && must_be_empty? && must_be_signed? && must_be_policy? && must_be_price? && must_be_datum?
          }

          (StateMachineDatum { state, seller, collateral, price, buyer, range }, Return) -> {
            let must_be_state = state == 1

            let must_be_signed = when buyer is {
                                  Some(buyer) ->  list.has(context.transaction.extra_signatories, buyer)
                                  _ -> False
                                  }
              
            let must_be_time = when context.transaction.validity_range.lower_bound.bound_type is {
                                interval.Finite(tx_earliest_time) ->  when range is {
                                                                        Some(range_value) -> range_value <= tx_earliest_time
                                                                        _ -> False  
                                                                        }
                                _ -> False
                                }

            expect Some(sm_input) = 
              list.find(context.transaction.inputs, fn(input) { input.output_reference == own_ref })
                                         
            expect Some(sm_output) = 
              list.find(context.transaction.outputs, fn(output) { output.address == sm_input.output.address })
                             
            let must_be_policy = list.has(value.policies(sm_output.value), threadtoken)

            let must_be_collateral = value.lovelace_of(sm_output.value) == collateral

            let new_data: Data = StateMachineDatum {
              state : 0,
              seller : seller,
              collateral : collateral,
              price: price,
              buyer: None,
              range: None
            }
                  
            let new_datum = InlineDatum(new_data)
                  
            let must_be_datum = new_datum == sm_output.datum                                
            
            must_be_state? && must_be_signed? && must_be_time? && must_be_policy? && must_be_collateral? && must_be_datum?
          }

          (StateMachineDatum { state, seller, collateral, price, buyer, range }, Shipping) -> {
            let must_be_state = state == 1

            let must_be_signed =
            list.has(context.transaction.extra_signatories, seller)

            expect Some(sm_input) = 
            list.find(context.transaction.inputs, fn(input) { input.output_reference == own_ref })
                                       
            expect Some(sm_output) = 
            list.find(context.transaction.outputs, fn(output) { output.address == sm_input.output.address })
                           
            let must_be_policy = list.has(value.policies(sm_output.value), threadtoken)

            let must_be_value = value.lovelace_of(sm_output.value) == price + collateral           

            let new_data: Data = StateMachineDatum {
              state : 2,
              seller : seller,
              collateral : collateral,
              price: price,
              buyer: buyer,
              range: range
            }
                  
            let new_datum = InlineDatum(new_data)
                  
            let must_be_datum = new_datum == sm_output.datum     

            must_be_state? && must_be_signed? && must_be_policy? && must_be_value? && must_be_datum?

          }

          (StateMachineDatum { state, .. }, Received) -> {
            state == 2
          }