            expect Some(seller_output) = 
              list.find(context.transaction.outputs, fn(output) { output.address.payment_credential ==  VerificationKeyCredential(seller) })

            let must_be_value = value.lovelace_of(seller_output.value) == price + collateral





                      (StateMachineDatum { state, seller, collateral, price, buyer, range }, Received) -> {
            let must_be_state = state == 2

            let must_be_signed = when buyer is {
                                  Some(buyer) ->  list.has(context.transaction.extra_signatories, buyer)
                                  _ -> False
                                  }

            expect Some(sm_input) = 
              list.find(context.transaction.inputs, fn(input) { input.output_reference == utxo_ref })
                                       
            expect Some(sm_output) = 
              list.find(context.transaction.outputs, fn(output) { output.address == sm_input.output.address })
                           
            let must_be_policy = list.has(value.policies(sm_output.value), threadtoken)   

            let new_data: Data = StateMachineDatum {
              state : 3,
              seller : seller,
              collateral : collateral,
              price: price,
              buyer: buyer,
              range: range
            }
                  
            let must_be_datum = InlineDatum(new_data) == sm_output.datum 

            must_be_state? && must_be_signed? && must_be_policy? && must_be_datum?
          }





          test received() {
  let own_ref =
    OutputReference {
      transaction_id: TransactionId {
        hash: #"ee220ba9258ef159bb44f0d3522b840a80475eac2df7176f2c513d59a2ead71f",
      },
      output_index: 0,
    }
  let script_purpose = Spend(own_ref)
  let threadtoken = #"99999999999999999999999999999999999999999999999999999999"
  let token_name = #"02"
  let own_val_hash = #"88888888888888888888888888888888888888888888888888888888"
  let buyer = #"77777777777777777777777777777777777777777777777777777777"
  let seller = #"00000000000000000000000000000000000000000000000000000000"
  let input_utxo =
    Input {
      output_reference: own_ref,
      output: Output {
        address: Address {
          payment_credential: ScriptCredential(own_val_hash),
          stake_credential: None,
        },
        value: value.add(
          value.from_lovelace(75_000_000),
          threadtoken,
          token_name,
          1,
        ),
        datum: NoDatum,
        reference_script: None,
      },
    }
  
  let new_data: Data = StateMachineDatum {
      state : 3,
      seller : seller,
      collateral : 25000000,
      price: 50000000,
      buyer: Some(buyer),
      range: Some(2)
  }  
  let new_datum = InlineDatum(new_data)
  let output1 =
    Output {
      address: Address {
        payment_credential: ScriptCredential(own_val_hash),
        stake_credential: None,
      },
      value: value.add(
        value.from_lovelace(50_000_000),
        threadtoken,
        token_name,
        1,
      ),
      datum: new_datum,
      reference_script: None,
    }
    let output2 =
    Output {
      address: Address {
        payment_credential: VerificationKeyCredential(seller),
        stake_credential: None,
      },
      value: value.from_lovelace(75_000_000),
      datum: new_datum,
      reference_script: None,
    }    
  let redeemer = Received
  let old_datum =
    StateMachineDatum {
      state: 2,
      seller: seller,
      collateral: 25000000,
      price: 50000000,
      buyer: Some(buyer),
      range: Some(2)
    }
  let tx =
    Transaction {
      inputs: [input_utxo],
      reference_inputs: [],
      outputs: [output1, output2],
      fee: value.zero(),
      mint: value.zero() |> value.to_minted_value(),
      certificates: [],
      withdrawals: [],
      validity_range: interval.everything(),
      extra_signatories: [buyer],
      redeemers: [],
      datums: dict.new(),
      id: TransactionId {
        hash: #"0000000000000000000000000000000000000000000000000000000000000000",
      },
    }
  let ctx = ScriptContext { purpose: script_purpose, transaction: tx }
  statemachine(threadtoken, old_datum, redeemer, ctx)
}


































